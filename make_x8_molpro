#!/usr/bin/python

import pybel
import copy
import numpy as np

from sys import argv

cc = dict()
cc["hf"] = "hf"
cc["corr"] = "ccsd(t)"
cc["basis"] = "avdz"
cc["prefix"] = "ccsdt_"

mp2 = dict()
mp2["hf"] = "hf"
mp2["corr"] = "mp2"
mp2["basis"] = "avdz"
mp2["prefix"] = "mp2_"

basis_sets = ["avdz", "avtz", "avqz"]

c1_files = [5, 6, 8, 9]

#                     1       2      3      4      5      6      7      8
distances = np.array([0.90,   0.95,  1.00,  1.05,  1.10,  1.25,  1.50,  2.00])
distance_names =     ["090", "095", "100", "105", "110", "125", "150", "200"]

def calc_com(mol):

    mol_mass = 0.0
    com = np.zeros(3)

    for atom in mol.atoms:
        mol_mass += atom.atomicmass
        com += np.array(atom.coords) * atom.atomicmass

    com /= mol_mass

    return com

def get_dummystring(mol, offset=0):
    
    dummy = "dummy"
    for atom in mol.atoms:
        dummy += "," + str(atom.type)[0] + str(offset)
        offset += 1

    return dummy

c_xyz = argv[1]
a_xyz = c_xyz.replace("_c.xyz", "_a.xyz")
b_xyz = c_xyz.replace("_c.xyz", "_b.xyz")

complex_id = int(c_xyz[:2])

a = pybel.readfile("xyz", a_xyz).next()
b = pybel.readfile("xyz", b_xyz).next()

min_distance = float("inf")

com_a = calc_com(a)
com_b = calc_com(b)

com_vector = com_b - com_a

dummy_a = get_dummystring(a, offset=0)
dummy_b = get_dummystring(b, offset=len(a.atoms))

print dummy_a
print dummy_b

cc = dict()
cc["hf"] = "hf"


for i, distance in enumerate(distances):

    coords = "geomtyp=xyz\n"
     
    coords += "geometry={\n"
    coords += str(len(a.atoms) + len(b.atoms)) + "\n"
    
    atom_id = 0

    for atom in a.atoms:

        atom_type = str(atom.type)[0]
        xyz = np.array(atom.coords)

        coords += "\n %s%-3d  %20.12f %20.12f %20.12f" % (atom_type, \
                atom_id, xyz[0], xyz[1], xyz[2])

        atom_id += 1

    for atom in b.atoms:

        atom_type = str(atom.type)[0]
        xyz = np.array(atom.coords) - com_vector + com_vector * distance

        coords += "\n %s%-3d  %20.12f %20.12f %20.12f" % (atom_type, \
                atom_id, xyz[0], xyz[1], xyz[2])

        atom_id += 1
    coords += "\n}\n"

    for j in range(4):

        basis   = ""
        hf      = ""
        corr    = ""
        prefix  = ""

        if j == 0:

            basis   = "avdz"
            hf      = "hf"
            corr    = "ccsd(t)"
            prefix  = "ccsdt_avdz_"

        elif j == 1:
            basis   = "avdz"
            prefix  = "mp2_avdz_"

        elif j == 2:
            basis   = "avtz"
            prefix  = "mp2_avtz_"

        elif j == 3:
            basis   = "avqz"
            prefix  = "mp2_avqz_"

        if j in [1, 2, 3]:
            hf      = "df-hf"
            corr    = "df-mp2"






        output = copy.deepcopy(coords)

        output += """

basis=%s

! Complex
set,charge=0

%s
e_rhf_c = energy*tokcal
%s
e_corr_c = energy*tokcal
e_c = e_corr_c - e_rhf_c


! Monomer 1
set,charge=1
%s

%s
e_rhf_a = energy*tokcal
%s 
e_corr_a = energy*tokcal
e_a = e_corr_a - e_rhf_a


! Monomer 2
set,charge=-1
%s

%s
e_rhf_b = energy*tokcal
%s
e_corr_b = energy*tokcal
e_b = e_corr_b - e_rhf_b


e_rhf_cp = e_rhf_c - (e_rhf_a + e_rhf_b)
e_corr_cp = e_c - (e_a + e_b)
""" % (basis, hf, corr, dummy_b, hf, corr, dummy_a, hf, corr)

        output_filename = "0%d/" % complex_id + prefix + \
            c_xyz.replace("_c.xyz", "_c%s.inp" % distance_names[i])

        print output_filename

        f = open(output_filename, "w")
        f.write(output)
        f.close()


    print output
